source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
str(outcome)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
?sort
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
?rank
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
?order
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("TX", "heart attack")
best("MD", "heart failure")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
?split
?name
?names
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
?data.frame
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
?split
?cbind
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/best.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source('~/Data_Science_Courses/ProgrammingAssignment3/rprog_data_ProgAssignment3-data/rankall.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
install.packages("RMySQL")
ghtoken <- "3bb8654e158c38f5ce3195bb97a2c250668bf784"
gclientid <- "db625527e4e2d736a058"
gclientsec <- "565db08984288d33023ec771462acad03cf75258"
library(httr)
?httr
?oauth_endpoint
oauth_endpoints("github")
myapp <- oauth_app("github", key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
?oauth_app
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?config
gtoken <- config(token = github_token)
?GET
?stop_for_status
?content
repoinfo <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 <- content(repoinfo)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2 <- jsonlite::fromJSON(json1)
?jsonlite::jsonlite
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
ls(json2)
head(json2)
?oauth1.0_token
myapp <- oauth_app("github", key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
?sign_oauth1.0
myapp <- oauth_app("github", key = "nas4152", secret = "1320340nicole")
sig <- sign_oauth1.0(myapp, token = "db625527e4e2d736a058", token_secret = "565db08984288d33023ec771462acad03cf75258")
ls(sig)
repoinfo <- GET("https://api.github.com/users/jtleek/repos", sig)
ls(repoinfo)
json1 <- content(repoinfo)
json2 <- jsonlite::fromJSON(jsonlite::toJSON(json1))
head(json2)
head(json1)
head(repoinfo)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", key = "3bb8654e158c38f5ce3195bb97a2c250668bf784")
myapp <- oauth_app("github", key = "3bb8654e158c38f5ce3195bb97a2c250668bf784")
install.packages("httpuv")
library(httr)
library(httpuv)
myapp <- oauth_app(oauth_endpoints("github"), key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
myapp <- oauth_app("github", key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
gtoken <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken2 <- config(token = gtoken)
ls(gtoken2)
gtoken[7]
gtoken2[7]
gtoken2[1]
gtoken2
repoinfo <- GET("https://api.github.com/users/jtleek/repos", gtoken2)
ls(repoinfo)
repoinfo[8]
myjson <- content(repoinfo)
ls(myjson)
myjson[2]
myjson[1]
?`httpuv-package`
?httpuv
oauth_endpoints("github")
myapp <- oauth_app("github", key = "db625527e4e2d736a058", secret = "565db08984288d33023ec771462acad03cf75258")
gtoken <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken2 <- config(token = gtoken)
repoinfo <- GET("https://api.github.com/users/jtleek/repos", gtoken2)
myjson <- content(repoinfo)
ls(myjson)
myjson[1]
library(httpuv)
library(httr)
?oauth_endpoints
oauth_endpoints("github")
?oauth_app
GET("https://github.com/settings/applications/356180", authenticate(user = "nas4152", password = "1320340nicole"))
myapp <- oauth_app("test",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("test",
key = "db625527e4e2d736a058",
secret = "565db08984288d33023ec771462acad03cf75258")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("test",
key = "db625527e4e2d736a058",
secret = "565db08984288d33023ec771462acad03cf75258")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
?stop_for_status
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
?content
data <- content(req)
json <- jsonlite::fromJSON(jsonlite::toJSON(data))
head(json)
data1 <- json[json$name= "datasharing"]
data1 <- json[json$name== "datasharing"]
data1
json[7:10, ]
?unique
?readLines
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
weblines <- readlines(con)
weblines <- readLines(con)
?nchar
nchar(weblines[10])
nchar(weblines[20])
nchar(weblines[30])
nchar(weblines[100])
?read.fwf
?url
library(curl)
?curl
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read.fwf
data <- read.fwf(con)
data <- read.fwf(con, widths = 9)
data <- read.fwf(con, widths = 1)
data <- read.fwf(con, widths = c(9,8,8,8,8))
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,8,8,8,8))
?colSums
colSums(data)
sum(data[ ,4])
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4))
sum(data[ ,4])
sum(asnumeric(data[ ,4])
?numeric
sum(numeric(data[ ,4]))
sum(as.numeric(data[ ,4]))
head(data)
?read.fwf
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), skip = 2)
head(data)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), header = TRUE)
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), header = TRUE, skip = 1)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), header = TRUE, skip = 1)
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), skip = 2)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), skip = 2)
data[1:5,4]
?sum
sum(as.numeric(data[ ,4]), na.rm = TRUE)
head(data)
data1 <- data[3:length(data), ]
data1 <- data[3:length(data[ ,1]), ]
head(data1)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,3,4,3,4,3,4,3), skip = 2)
head(data)
nchar("03JAN1990     23.4-0.4     25.1-0.3     26.6 0.0     28.6 0.3")
nchar("     23.4")
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,9,9,9,9,9,9,9,9), skip = 2)
head(data)
?read.fwf
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,9,9,9,9,9,9,9,9), header = TRUE, skip = 1)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(9,4,4,4,4,4,4,4,4), skip = 2, strip.white = TRUE)
head(data)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(10,4,4,4,4,4,4,4,4), skip = 2, strip.white = TRUE)
head(data)
con <- curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- read.fwf(con, widths = c(10,4,4,4,4,4,4,4,4), skip = 4, strip.white = TRUE)
head(data)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(by_package, count > 679)
?filter
top_counts <- filter(by_package, count > 679)
top_counts <- filter(by_package, as.numeric(count) > 679)
top_counts <- filter(by_package, "count" > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_counts <- filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
seperate(res, col = sex_class, into = c("sex", "class"))
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
library(dplyr)
?bind_rows
?rbind
?library
setwd("~/Data_Science_Courses/cleaningdata/FinalProject")
##check if data is already downloaded, if not download data and unzip files
if (!dir.exists("UCI HAR Dataset")) {
url1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url1, "data.zip")
unzip("data.zip")
}
## features.txt lists col names for observation variables
## train or test/subject_test.txt col to add with individual ids
## train or test/y_train or test.txt col to add with activity (see activity_
##labels.txt for meaning)
## inertial data: 128 variables b/c 128 readings per video
activitylabels <- read.table("UCI HAR Dataset/activity_labels.txt")
## first col is number, col2 is description
variablelabels <- read.table("UCI HAR Dataset/features.txt")
## col1 is index
## see variablelabels for col names
testobs <- read.table("UCI HAR Dataset/test/x_test.txt")
trainobs <- read.table("UCI HAR Dataset/train/X_train.txt")
## use activitylabels for replacing numbers with activity names
testactivity <- read.table("UCI HAR Dataset/test/y_test.txt")
trainactivity <- read.table("UCI HAR Dataset/train/y_train.txt")
## numbers to represent individuals
testid <- read.table("UCI HAR Dataset/test/subject_test.txt")
trainid <- read.table("UCI HAR Dataset/train/subject_train.txt")
## observation variables - combine train and test sets and label columns
combobs <- rbind(trainobs, testobs)
colnames(combobs) <- variablelabels[ ,2]
colnames(combobs) <- make.unique(colnames(combobs))
## select mean and standard of deviation for observation data
library(dplyr)
tidydata <- select(combobs, contains("mean", ignore.case = TRUE),
contains("std", ignore.case = TRUE))
## merging training and test sets for subject id and activity variables
id <- rbind(trainid, testid)
activity <- rbind (trainactivity, testactivity)
## adding subject id and activity columns to beginning of data set
tidydata <- cbind(id, activity, tidydata)
## labeling added columns
colnames(tidydata) <- c("subject", "activity", colnames(tidydata[ ,3:88]))
## converting activity column to factor with descriptive levels
tidydata$activity <- as.factor(tidydata$activity)
levels(tidydata$activity) <- activitylabels[ ,2]
## creating new dataset for variable means by subject and activity
library(reshape2)
meltdata <- melt(tidydata, id.vars = 1:2)
subjmeans <- dcast(meltdata, subject ~ variable, mean)
actmeans <- dcast(meltdata, activity ~ variable, mean)
library(dplyr)
subjmeans <- mutate(subjmeans, group_type = "subject")
subjmeans <- select(subjmeans, group_type, group = subject, everything())
class(subjmeans$group) <- "character"
actmeans <- mutate(actmeans, group_type = "activity")
actmeans <- select(actmeans, group_type, group = activity, everything())
actmeans$group <- as.character(actmeans$group)
dfmeans <- bind_rows(subjmeans, actmeans)
colnames(dfmeans)
?download.file
?unzip
setwd("~/Data_Science_Courses/exploratory/week1/ExData_Plotting1")
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_
consumption.zip"
if (!dir.exists("plotdata.zip")) {
download.file(url, "plotdata.zip", method = "curl")
unzip("plotdata.zip")
}
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
if (!dir.exists("plotdata.zip")) {
download.file(url, "plotdata.zip", method = "curl")
unzip("plotdata.zip")
}
?read.csv
headtext <- read.table("houshold_power_consumption.txt", nrows = 5)
headtext <- read.table("household_power_consumption.txt", nrows = 5)
headtext
View(headtext)
headtext <- read.csv("household_power_consumption.txt", sep = ";" nrows = 5)
headtext <- read.csv("household_power_consumption.txt", sep = ";", nrows = 5)
class(headtext[ ,1])
class(headtext[ ,1])
headtext[ ,1] <- as.Date(headtext[ ,1])
class(headtext[ ,1])
headtext <- read.csv("household_power_consumption.txt", sep = ";", nrows = 5)
?as.Date
headtext[ ,1] <- as.Date(headtext[ ,1], format = "%d/%m/%Y")
?read.csv
download.packages("sqldf")
download.packages(sqldf)
install.packages("sqldf")
library(sqldf)
R.Version()
